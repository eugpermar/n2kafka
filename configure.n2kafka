#!/bin/bash
#

mkl_require good_cflags must pass
mkl_require socket must pass
mkl_require gitversion as GITVERSION
mkl_require atomics must pass

mkl_meta_set "description" "name"      "n2kafka"
mkl_meta_set "description" "oneline"   "The Network to kafka conversion service"
mkl_meta_set "description" "long"      "Consume messages from tcp/udp/http and send them via kafka"
mkl_meta_set "description" "copyright" "Copyright (c) 2014-2016 Eneo Tecnologia S.L., (c) 2017 Eugenio PÃ©rez <eupm90@gmail.com>"

mkl_mkvar_append CPPFLAGS CPPFLAGS "-DFORTIFY_SOURCE=2 -D_GNU_SOURCE"
mkl_mkvar_append CPPFLAGS CPPFLAGS "-fno-strict-aliasing" # Needed by libev
mkl_mkvar_append CPPFLAGS CPPFLAGS "-Wunused -Wcast-qual -Wextra -Wsign-conversion -Wshadow"
#mkl_mkvar_append CPPFLAGS CPPFLAGS "-ftrack-macro-expansion=2"
mkl_mkvar_append CPPFLAGS CPPFLAGS "-Wdisabled-optimization -Winit-self -Wlogical-op"
mkl_mkvar_append CPPFLAGS CPPFLAGS "-Wmissing-include-dirs -Wstrict-overflow=5 -Wundef -Wswitch-default"
mkl_mkvar_append CPPFLAGS CPPFLAGS "-Wmissing-declarations -Wdisabled-optimization"

# This will make the life easier
mkl_mkvar_append CPPFLAGS CPPFLAGS "-I. -I./src"

mkl_toggle_option "Feature" WITH_HTTP           "--enable-http"           "HTTP support using libmicrohttpd" "y"
mkl_toggle_option "Debug"   ENABLE_ASSERTIONS   "--enable-assertions"     "Enable C code assertions" "n"
mkl_toggle_option "Debug"   WITH_COVERAGE       "--enable-coverage"       "Coverage build" "n"

LIBRD_COMMIT=bb4ec7e65c8d3d411837e506e8d02f293b9a0a20
function bootstrap_librd {
  if [[ -d "librd" ]]; then
    # Already bootstrapped
    return 0
  fi

  mv "librd-${LIBRD_COMMIT}" librd
  cd librd
  if [[ $HAVE_LTO = 'y' ]]; then
    local -r cflag_lto='-flto'
    local -r ar_lto='gcc-ar'
    local -r ld_lto='gcc'
    sed -i 's%-soname%-Wl,-soname%' Makefile
  fi
  CC=gcc CFLAGS="$cflag_lto" AR="$ar_lto" LD="$ld_lto" make libs
}

function checks_librd {
  mkl_meta_set "librd" "desc" "Magnus Edenhill lib for rapid development"
  mkl_meta_set "librd" "bootstrap_url" "https://github.com/eugpermar/librd/archive/${LIBRD_COMMIT}.zip"
  mkl_meta_set "librd" "bootstrap_cppflags" "-I./vendor/librd"
  mkl_meta_set "librd" "bootstrap_static_lib" "vendor/librd/librd/librd.a"
  mkl_meta_set "librd" "bootstrap_makefn" "bootstrap_librd"

  mkl_lib_check --static=-lrd --libname=-lrd "librd" "" fail CC "-lrd -lpthread -lz -lrt" \
       "#include <librd/rd.h>"
}

readonly tommyds_version=2.1

function bootstrap_tommyds {
  if [[ -f "vendor/tommyds/tommyds-${tommyds_version}/tommyds/tommy.o" ]]; then
    # Already bootstrapped
    return 0
  fi

  cd tommyds-${tommyds_version}
  # -Werror=sign-conversion
  sed -i 's%return __builtin_c%return (tommy_uint_t)__builtin_c%' -- tommyds/tommytypes.h
  if [[ $HAVE_LTO = 'y' ]]; then
    sed -i 's%^CFLAGS =%^CFLAGS +=%' -- Makefile
    local -r cflag_lto='-flto'
  fi
  CFLAGS="$cflag_lto" make tommyds/tommy.o
}

function checks_tommyds {
  readonly vendor_path="vendor/tommyds/tommyds-${tommyds_version}"
  mkl_meta_set "tommyds" "desc" "high performance library of array, hashtables and tries data structures".
  mkl_meta_set "tommyds" "bootstrap_url" "https://github.com/amadvance/tommyds/archive/v${tommyds_version}.tar.gz"
  mkl_meta_set "tommyds" "bootstrap_cppflags" "-I./${vendor_path}"
  mkl_meta_set "tommyds" "bootstrap_static_lib" "${vendor_path}/tommyds/tommy.o"
  mkl_meta_set "tommyds" "bootstrap_makefn" "bootstrap_tommyds"

  mkl_lib_check "tommyds" "" fail CC "${vendor_path}/tommyds/tommy.o" \
       "#include <tommyds/tommyhashtbl.h>
       void f();
       void f() {tommy_hashtable_init(NULL, 16);}"
}

readonly librdkafka_version=0.11.4
bootstrap_librdkafka () {
  mkdir -p librdkafka_opt
  cd librdkafka-${librdkafka_version}
  # Do not generate anything but static library
  sed -i 's/^all:.*/all: libs/' -- Makefile
  sed -i 's/^all:.*/all: librdkafka.a/' -- src/Makefile
  sed -i 's/^all:.*/all: librdkafka++.a/' -- src-cpp/Makefile

  if [[ $HAVE_LTO = 'y' ]]; then
    # Duplicated functions
    sed -i '/^void rd_hexdump (/,/^}/d' -- src/rdlog.c
    local -r cflag_lto='-flto'
  fi
  AR=gcc-ar LDFLAGS=-flto CPPFLAGS="$cflag_lto" ./configure --prefix "../librdkafka_opt"
  AR=gcc-ar RANLIB=gcc-ranlib make
  make install
}

checks_librdkafka () {
  readonly vendor_path="vendor/librdkafa/librdkafa-${librdkafka_version}"
  mkl_meta_set "librdkafka" "deb" "librdkafka-dev"
  mkl_meta_set "librdkafka" "desc" \
      "Magnus Edenhill's librdkafka is available at http://github.com/edenhill/librdkafka"
  mkl_meta_set "librdkafka" "bootstrap_url" "https://github.com/edenhill/librdkafka/archive/v${librdkafka_version}.tar.gz"
  mkl_meta_set "librdkafka" "bootstrap_cppflags" "-I./vendor/librdkafka/librdkafka_opt/include/"
  mkl_meta_set "librdkafka" "bootstrap_static_lib" "vendor/librdkafka/librdkafka_opt/lib/librdkafka.a"
  mkl_meta_set "librdkafka" "bootstrap_makefn" "bootstrap_librdkafka"

  mkl_lib_check --static=-lrdkafka --libname=-lrdkafka "librdkafka" "" fail CC "-lrdkafka -lpthread -lz" \
       "#include <librdkafka/rdkafka.h>
       #if RD_KAFKA_VERSION < 0x00090100
       #error Need librdkafka version >0.9.1
       #endif"
}

function checks_libmicrohttpd {
    # quick hack to avoid bad formatted libmicrohttpd header. With this macro
    # defined, the header will know that we are using GCC at libmicrohttp
    # 0.9.44
    mkl_mkvar_append CPPFLAGS CPPFLAGS "-D__clang_major__"
    mkl_meta_set "libmicrohttpd" "desc" \
        "library embedding HTTP server functionality"
    mkl_meta_set "libmicrohttpd" "deb" "libmicrohttpd-dev"
    mkl_lib_check "libmicrohttpd" "" fail CC "-lmicrohttpd" \
        "#include <microhttpd.h>"
    mkl_define_set "Have libmicrohttpd library" "HAVE_LIBMICROHTTPD" "1"
}

function checks {
    checks_librd
    checks_tommyds
    checks_librdkafka

    mkl_meta_set "libev" "desc" "A high performance full-featured event loop written in C"
    mkl_meta_set "libev" "deb" "libev-dev"
    mkl_lib_check "libev" "" fail CC "-lev" "#include <ev.h>"

    # -libmicrohttpd required if HTTP enabled
    if [[ "x$WITH_HTTP" == "xy" ]]; then
        checks_libmicrohttpd
    fi

    mkl_meta_set "libjansson" "desc" "C library for encoding, decoding and manipulating JSON data"
    mkl_meta_set "libjansson" "deb" "libjansson-dev"
    mkl_lib_check --static=-ljansson "libjansson" "" fail CC "-ljansson" \
       "#include <jansson.h>
       #if JANSSON_VERSION_HEX < 0x020700
       #error Need jansson library version >2.7
       #endif"

    # TODO include some function that is only in v2, because CentOS bring us v1
    mkl_meta_set "yajl" "desc" "Small event-driven (SAX-style) JSON parser"
    mkl_lib_check --static=-lyajl "yajl" "" fail CC "-lyajl" \
      "#include <yajl/yajl_parse.h>"

    if [[ "$ENABLE_ASSERTIONS" != 'y' ]]; then
      mkl_mkvar_append CPPFLAGS CPPFLAGS "-DNDEBUG"
    fi

    if [[ "x$WITH_COVERAGE" != "xn" ]]; then
      mkl_mkvar_append CPPFLAGS CPPFLAGS "--coverage"
      mkl_mkvar_append LDFLAGS LDFLAGS "--coverage"
    fi
}
